{
	"argument": 	{
						"values": 	[
										"<arithmetic_operation>",
										"<other_argument>",
										"..."
						]
	},
	"arguments":	{
						"unit":		"<argument>",
						"params": 	"number",
						"sep": 		","
	},
	"arithmetic_operation": 	{
						"values":	[
										"<operand> + <operand>",
										"<operand> - <operand>",
										"<operand> * <operand>",
										"<operand> / <operand>",
										"<operand> ** <operand>"
						]
	},
	"cmd_identifier":	{
						"values":	[
										"/\\b(?!\\bexists\\b)(?!\\b\\u2203\\b)(?!\\bEXISTS\\b)(?!\\bst\\b)(?!\\bans\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b/"
						]
	},
	"cmd_arg":	{
						"values":	[
										"<arithmetic_operation>",
										"\"<string>\"",
										"'<string>'",
										"<identifier> = <arithmetic_operation>",
										"<identifier> = <\"<string>\">",
										"<identifier> = <'<string>'>"
						]
	},
	"command":	{
						"values":	[
										".<cmd_identifier> (<command_arguments>)"
						]
	},
	"command_arguments": 	{
						"unit": 	"<cmd_arg>",
						"sep": 		",",
						"params": 	"number",
						"min": 		1
	},
	"composite_predicate":	{
						"values":	[
										"( <conjunction> )",
                        				"<predicate>"
						]
	},
	"comparison":	{
						"values":	[
										"<argument> == <argument>",
										"<argument> < <argument>",
										"<argument> <= <argument>",
										"<argument> > <argument>",
										"<argument> >= <argument>",
										"<argument> != <argument>"
						]
	},
	"condition": 	{
						"values": 	[
										"<composite_predicate> // <composite_predicate>"
						]
	},
	"conjunction": 		{
						"unit": 	"<predicate>",
						"sep": 		"&",
						"params": 	"number"
	},
	"constraint": 	{
						"values": 	[
										"<conjunction> -: <identifier> ( <arguments> )"
						]
	},
	"existential_body": 	{
						"values": 	[
										"<arguments>; <predicates>"
						]
	},
	"existential_predicate": 	{
						"values": 	[
										"exists ( <arguments>; <predicates> )"
						]
	},
	"expression":	{
						"values":	[
										{"rule":	[
														"<identifier> ( <arguments> ) :- <composite_predicate> // <composite_predicate>",
														"<identifier> ( <arguments> ) :- <conjunction>",
														"ans ( <optional_arguments> ) :- <composite_predicate> // <composite_predicate>",
														"ans ( <optional_arguments> ) :- <conjunction>"
													]
										},
										{"constraint": [
														"<conjunction> -: <identifier> ( <arguments> )"
													]
										},
										{"fact": [
														"<identifier> ()",
														"<identifier> (<fact_arguments>)"
													]
										},
										{"probabilistic_rule": [
														"<identifier> ( <optional_arguments> ) :: <arithmetic_operation> :- <composite_predicate> // <composite_predicate>",
														"<identifier> ( <optional_arguments> ) :: <arithmetic_operation> :- <conjunction>"
													]
										},
										{"probabilistic_fact": [
														"( <arithmetic_operation> ) :: <constant_predicate>",
														"( <int_ext_identifier> ) :: <constant_predicate>"
													]
										},
										{"statement": [
														"<identifier> := <arithmetic_operation>"
													]
										},
										{"statement_function": [
														"<identifier> ( <optional_arguments> ) := <argument>"
													]
										},
										{"command": [
														".<cmd_identifier> (<command_arguments>)"
													]
										}
						]
	},
	"fact":			{
						"values":	[
										"<identifier> ()",
										"<identifier> (<fact_arguments>)"
						]
	},
	"fact_argument":			{
						"values":	[
										"<text>",
										"<number>",
										"@<identifier>"
						]
	},"fact_arguments":			{
						"unit":		"<fact_argument>",
						"params": 	"number",
						"sep": 		","
	},
	"function_identifier": 	{
						"values": 	[
										"<identifier>",
										"@<identifier>",
										"<lambda_expression>",
										"(<lambda_expression>)"
						]
	},
	"head":			{
						"values":	[
										"<identifier> ( <optional_arguments> )"
						]
	},
	"identifier":	{
						"values":	[
										"<cmd_identifier>",
										"<identifier_regexp>"
						]
	},
	"identifier_regexp":	{
						"value":	"` /[0-9a-zA-Z\\/#%\\._:-]+/ `"
	},
	"other_argument": 	{
						"values": 	[
										"<function_identifier> (<optional_arguments>)",
										"( <argument> )",
										{"number":		[
															"<integer>",
															"<float>"
														]
										},
										{"text":		[
															"\"<text>\"",
															"'<text>'"
														]
										},
										{"signed_identifier":	[
																	"<identifier>",
																	"@<identifier>",
																	"<lambda_expression>",
																	"- <identifier>",
																	"- @<identifier>",
																	"- <lambda_expression>"
																]
										}
						]
	},
	"operator": 	{
						"values": 	[
										"+",
										"-",
										"*",
										"/",
										"**"
						]
	},
	"optional_arguments": {
						"unit":		"<argument>",
						"params": 	"number",
						"sep": 		",",
						"min": 		0
	},
	"predicate":	{
						"values":	[
										"<identifier> ( <optional_arguments> )",
										"@<identifier> ( <optional_arguments> )",
										"lambda <arguments> : <argument> ( <optional_arguments> )",
										"~ <predicate>",
										"exists ( <arguments>; <predicates> )",
										{"comparison":	[
															"( <argument> == <argument> )",
															"( <argument> < <argument> )",
															"( <argument> <= <argument> )",
															"( <argument> > <argument> )",
															"( <argument> >= <argument> )",
															"( <argument> != <argument> )"
														]
										},
										"True",
										"False"
						]
	},
	"predicates": 	{
						"unit":		"<predicate>",
						"params": 	"number",
						"sep": 		","
	},
	"predefined_functions":		{
						"values": 	[
						]
	},
	"probabilistic_fact":	{
						"values": 	[
										"( <arithmetic_operation> ) :: <constant_predicate>",
										"( <int_ext_identifier> ) :: <constant_predicate>"
						]
	},
	"probabilistic_rule":	{
						"values": 	[
										"<identifier> ( <optional_arguments> ) :: <arithmetic_operation> :- <composite_predicate> // <composite_predicate>",
										"<identifier> ( <optional_arguments> ) :: <arithmetic_operation> :- <conjunction>"
						]
	},
	"query":		{
						"values": 	[
										"ans ( <optional_arguments> )"
						]
	},
	"rule": 		{
						"values":	[
										"<identifier> ( <arguments> ) :- <composite_predicate> // <composite_predicate>",
										"<identifier> ( <arguments> ) :- <conjunction>",
										"ans ( <optional_arguments> ) :- <composite_predicate> // <composite_predicate>",
										"ans ( <optional_arguments> ) :- <conjunction>"
						]
	},
	"signed_lambda_expression": 	{
						"values": 	[
										"<lambda_expression>",
										"- <lambda_expression>"
						]
	},
	"signed_int_ext_identifier":		{
						"values": 	[
										"<int_ext_identifier>",
										"- <int_ext_identifier>"
						]
	},
	"statement": 	{
						"values": 	[
										"<identifier> := <arithmetic_operation>"
						]
	},
	"statement_function": 	{
						"values": 	[
										"<identifier> ( <optional_arguments> ) := <argument>"
						]
	}
}
