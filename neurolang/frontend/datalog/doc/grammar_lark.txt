@startuml

object TRUE
TRUE : "True" | "\u22A4"
object FALSE
FALSE : "False" | "\u22A5"
object logical_constant
logical_constant : FALSE | TRUE
TRUE  --|> logical_constant
FALSE --|> logical_constant

object FLOAT
object float
float : FLOAT | "-" FLOAT
FLOAT --|> float

object INT
object int
int : INT | "-" INT
INT   --|> int

object number
number : integer | float
float --|> number
int   --|> number

object SINGLE_QUOTE
SINGLE_QUOTE : "'"
object DOUBLE_QUOTE
DOUBLE_QUOTE : "\\""
object TEXT
TEXT : DOUBLE_QUOTE /[a-zA-Z0-9 ]*/ DOUBLE_QUOTE | SINGLE_QUOTE /[a-zA-Z0-9 ]*/ SINGLE_QUOTE
SINGLE_QUOTE --|> TEXT
DOUBLE_QUOTE --|> TEXT

object text
text : TEXT
TEXT --|> text

object EXISTS
EXISTS : "exists" | "\u2203" | "EXISTS"
object exists
exists : EXISTS
EXISTS --|> exists

object CMD_IDENTIFIER
CMD_IDENTIFIER : /\\b(?!\\bexists\\b)(?!\\b\\u2203\\b)(?!\\bEXISTS\\b)(?!\\bst\\b)(?!\\bans\\b)[a-zA-Z_][a-zA-Z0-9_]*\\b/
object cmd_identifier
cmd_identifier : CMD_IDENTIFIER
CMD_IDENTIFIER --|> cmd_identifier

object IDENTIFIER_REGEXP
IDENTIFIER_REGEXP : "`" /[0-9a-zA-Z\/#%\._:-]+/ "`"
object identifier_regexp
identifier_regexp : IDENTIFIER_REGEXP
IDENTIFIER_REGEXP --|> identifier_regexp

object identifier
identifier : cmd_identifier | identifier_regexp
cmd_identifier --|> identifier
identifier_regexp --|> identifier

object ext_identifier
ext_identifier : "@" identifier
identifier --|> ext_identifier

object literal
literal : number | text <color:red><s>| ext_identifier</s></color>
number --|> literal
text --|> literal
ext_identifier ..|> literal

object constant_predicate
constant_predicate : identifier "(" <color:red>(</color>literal <color:red>| ext_identifier )</color> ("," <color:red>(</color>literal <color:red>| ext_identifier )</color>)* ")" | identifier "(" ")"
identifier           --|> constant_predicate
literal              --|> constant_predicate
ext_identifier -[#red]-|> constant_predicate

object fact
fact : constant_predicate
constant_predicate --|> fact

object exponent
exponent : literal | function_application | signed_int_ext_identifier | "(" argument ")"
literal                   --|> exponent

object factor
factor : exponent | factor "**" exponent
factor --|> factor
exponent --|> factor

object term
term : factor | term "*" factor | term "/" factor
term --|> term
factor --|> term

object arithmetic_operation
arithmetic_operation : term | arithmetic_operation "+" term | arithmetic_operation "-" term
arithmetic_operation --|> arithmetic_operation
term --|> arithmetic_operation

object DOTS
DOTS : "..."
object argument
argument : arithmetic_operation <color:red><s>| function_application</s></color> | DOTS
arithmetic_operation --|> argument
DOTS                 --|> argument
argument --|> exponent

object arguments
arguments : argument ("," argument)*
argument --|> arguments

object lambda_expression
lambda_expression : "lambda" arguments ":" argument
arguments --|> lambda_expression
argument --|> lambda_expression

object int_ext_identifier
int_ext_identifier : identifier | ext_identifier | lambda_expression
identifier        --|> int_ext_identifier
ext_identifier    --|> int_ext_identifier
lambda_expression --|> int_ext_identifier

object signed_int_ext_identifier
signed_int_ext_identifier : int_ext_identifier | "-" int_ext_identifier
int_ext_identifier        --|> signed_int_ext_identifier
signed_int_ext_identifier --|> exponent

object function_application
function_application : "(" lambda_expression ")" "(" [ arguments ] ")" | <color:red>id_application</color>
lambda_expression  --|> function_application
arguments          --|> function_application
int_ext_identifier --|> function_application
function_application --|> exponent
function_application ..|> argument

object NO_DBL_QUOTE_STR
NO_DBL_QUOTE_STR : /[^"]*/
object PYTHON_STRING
PYTHON_STRING : DOUBLE_QUOTE NO_DBL_QUOTE_STR DOUBLE_QUOTE | SINGLE_QUOTE NO_DBL_QUOTE_STR SINGLE_QUOTE
SINGLE_QUOTE     --|> PYTHON_STRING
DOUBLE_QUOTE     --|> PYTHON_STRING
NO_DBL_QUOTE_STR --|> PYTHON_STRING

object python_string
python_string : PYTHON_STRING
PYTHON_STRING --|> python_string

object pos_item
pos_item : arithmetic_operation | python_string
arithmetic_operation --|> pos_item
python_string        --|> pos_item

object keyword_item
keyword_item : identifier "=" pos_item
identifier --|> keyword_item
pos_item   --|> keyword_item

object cmd_arg
cmd_arg : <color:red>pos_item | keyword_item</color>
pos_item     -[#red]-|> cmd_arg
keyword_item -[#red]-|> cmd_arg

object cmd_args
cmd_args : <color:red>cmd_arg ("," cmd_arg)*</color>
cmd_arg      -[#red]-|> cmd_args

object command
command : "." cmd_identifier "(" [ cmd_args ] ")"
cmd_identifier --|> command
cmd_args --|> command

object probabilistic_fact
probabilistic_fact : ( arithmetic_operation | int_ext_identifier ) "::" constant_predicate
arithmetic_operation --|> probabilistic_fact
int_ext_identifier --|> probabilistic_fact
constant_predicate --|> probabilistic_fact

object statement_function
statement_function : identifier "(" [ arguments ] ")" ":=" argument
identifier --|> statement_function
arguments --|>  statement_function
argument --|> statement_function

object statement
statement : identifier ":=" <color:red><s>( lambda_expression |</s></color> arithmetic_operation <color:red><s>| int_ext_identifier )</s></color>
identifier           --|> statement
lambda_expression    ..|> statement
arithmetic_operation --|> statement
int_ext_identifier   ..|> statement

object COMPARISON_OPERATOR
COMPARISON_OPERATOR : "==" | "<" | "<=" | ">=" | ">" | "!="
object comparison
comparison : argument COMPARISON_OPERATOR argument
argument --|> comparison
COMPARISON_OPERATOR --|> comparison

object id_application
id_application : <color:red>int_ext_identifier "(" [ arguments ] ")"</color>
int_ext_identifier -[#red]-|> id_application
arguments          -[#red]-|> id_application
id_application     -[#red]-|> function_application

object predicate
predicate : <color:red>id_application</color> | negated_predicate | existential_predicate | <color:red>"("</color> comparison <color:red>")"</color> | logical_constant <color:red><s>| "(" predicate ")"</s></color>
id_application -[#red]-|> predicate
arguments --|> predicate
comparison --|> predicate
logical_constant --|> predicate
predicate --|> predicate

object negated_predicate
negated_predicate : ("~" | "\u00AC" ) predicate
predicate --|> negated_predicate
negated_predicate --|> predicate

object conjunction
conjunction : predicate (<color:red>","</color> predicate)*
predicate --|> conjunction

object body
body : conjunction
conjunction --|> body

object head_predicate
head_predicate : identifier "(" [ arguments ] ")"
identifier --|> head_predicate
arguments  --|> head_predicate

object head
head : head_predicate
head_predicate --|> head

object SUCH_THAT
SUCH_THAT : "st" | ";"
object existential_body
existential_body : arguments SUCH_THAT predicate ( <color:red>","</color> predicate )*
arguments --|> existential_body
SUCH_THAT --|> existential_body
predicate --|> existential_body

object existential_predicate
existential_predicate : exists "(" existential_body ")"
exists --|> existential_predicate
existential_body --|> existential_predicate
existential_predicate --|> predicate

object RIGHT_IMPLICATION
RIGHT_IMPLICATION : "-:" | "\N{RIGHTWARDS ARROW}"
object constraint
constraint : body RIGHT_IMPLICATION head
body --|> constraint
RIGHT_IMPLICATION --|> constraint
predicate --|> constraint

object composite_predicate
composite_predicate : "(" conjunction ")" | predicate
conjunction --|> composite_predicate
predicate --|> composite_predicate

object condition
condition : composite_predicate "//" composite_predicate
composite_predicate --|> condition

object query
query : "ans(" [ arguments ] ")"
arguments --|> query

object IMPLICATION
IMPLICATION : ":-" | "\N{LEFTWARDS ARROW}"
object rule
rule : (head | query) IMPLICATION (condition | body)
head --|> rule
query --|> rule
IMPLICATION --|> rule
condition --|> rule
body --|> rule

object probabilistic_rule
probabilistic_rule : head "::" <color:red><s>(</s></color> arithmetic_operation <color:red><s>| int_ext_identifier )</s></color> IMPLICATION (condition | body)
arithmetic_operation --|> probabilistic_rule
int_ext_identifier ..|> probabilistic_rule
IMPLICATION --|> probabilistic_rule
condition --|> probabilistic_rule
body --|> probabilistic_rule

object expression
expression : rule | constraint | fact | probabilistic_rule | probabilistic_fact | statement | statement_function | command
rule --|> expression
constraint --|> expression
fact   --|> expression
probabilistic_rule    --|> expression
probabilistic_fact     --|> expression
statement      --|> expression
statement_function       --|> expression
command        --|> expression

object expressions
expressions : (expression)+
expression --|> expressions

object start
start : expressions
expressions --|> start
@enduml